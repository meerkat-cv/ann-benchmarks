# -*- coding: utf-8 ; org-export-babel-evaluate: t; org-confirm-babel-evaluate: nil; org-image-actual-width: 600;-*-
# -*- mode: org -*-
#+AUTHOR: Julio Toss
#+EMAIL: julio@meerkat.com.br
#+STARTUP: indent 
#+STARTUP: logdrawer hideblocks
#+OPTIONS: html-postamble:nil f:nil broken-links:mark H:5 toc:nil todo:nil ^:{}
#+PROPERTY: header-args :cache no :eval never-export
#+SEQ_TODO: TODO INPROGRESS(i) WAITING(@) | DONE NOTE DEFERRED(@) CANCELED(@)


* DONE Dataset - vgg-512-euclidean

Dataset from face images : https://www.robots.ox.ac.uk/~vgg/data/vgg_face2/
Face descriptors (feature vectors) were extracted with frapi's method ( arcFace )

#+begin_src python :results output table :exports results :eval never
import numpy as np
import h5py

filename = "../data/vgg-512-euclidean.hdf5"
dataset = h5py.File(filename, "r")

train = set(dataset['train_lbl'])
test = set(dataset['test_lbl'])
diff = (test - train) 

print("Vectors type:", dataset['train'].dtype)
print("Train Vectors:", dataset['train'].shape)
print("Test Vectors:", dataset['test'].shape)

print("Train Labels:", len(train))
print("Test Labels:", len(test))

print("Untrained Labels: ", len(diff))

#+end_src

#+RESULTS:
: Vectors type: float64
: Train Vectors: (2701775, 512)
: Test Vectors: (10000, 512)
: Train Labels: 8631
: Test Labels: 5748
: Untrained Labels:  0

* Evaluation methodology 

For each algorithm configuration ( algorithm + parameters ):
- we build the indexing datastructure one time.
- we perform two test /runs/. In each /run/ the full train dataset is queried over the computed index.
- each query is executed individually ( no batch queries ).

Resource limits:
Each test configuration is executed in a docker container. 
Containers resources where limited to 1 CPU, unlimited memory and run timeout of 5 hours.


** Performance Metrics
*** Index
- Index build time: we measure the seconds to run the method's =fit= function.
- Index memory usage: we compute the difference between the Resident Set Size , before and after the fit function.

Sample snippet: 
#+begin_src sh :results output :exports both
t0 = time.time()
memory_usage_before = algo.get_memory_usage()
algo.fit(X_train)
build_time = time.time() - t0
index_size = algo.get_memory_usage() - memory_usage_before
#+end_src

*** Query Time ( Latency )

In each test run, we measure seconds (wall time) for each query individually. 
All queries' times in a single run are added up to the compute average query time.

We perform two test /runs/ and take the best average time, which is reported in our results.

Each individual query time are save to =.hdf5= files in case we need them for extra analysis.

** Quality Metrics

The output of the knn-query is a list of neighbors ids in the /Train/ dataset.

/Note:/ all the queries were executed on a *10-Nearest-Neighbors* index, so the response will always be a list of 10 candidates ordered by distance ( from smallest to largest ) 

From the list of candidates ids we generate a list candidate labels and compute the first position where the query label appears in the candidate list ( aka rank).

Rank computation:
#+begin_src python :results output :exports both
if label in query_labels:
    rank_q = neighbor_labels.index( label )
else:
    rank_q = float(inf)
#+end_src

We computed two rank based accuracy :

- Accuracy at Rank@1 :: =( queries with rank < 1 ) / num_queries=

- Accuracy at Rank@10 :: =( queries with rank < 10) / num_queries=


* Algorithms                                                       :noexport:
** Selected algorithm 
Faiss
HNSW

* Results

Raw results are available here : [[../results/vgg-512-euclidean.csv]]

#+begin_src R :results output :exports none :session 
options(crayon.enabled = FALSE)
options(dplyr.width=Inf)

library(tidyverse)
df = read_delim("../results/vgg-512-euclidean.csv", delim=',', trim_ws = TRUE )
head(df)
#+end_src

#+RESULTS:
#+begin_example
Parsed with column specification:
cols(
  dataset = col_character(),
  K = col_double(),
  distance = col_character(),
  algorithm = col_character(),
  parameters = col_character(),
  `k-nn` = col_double(),
  `accuracy-R@1` = col_double(),
  `accuracy-R@10` = col_double(),
  qps = col_double(),
  queryTime = col_double(),
  build = col_double(),
  indexsize = col_double()
)
# A tibble: 6 x 12
  dataset               K distance  algorithm parameters                       
  <chr>             <dbl> <chr>     <chr>     <chr>                            
1 vgg-512-euclidean    10 euclidean NGT-onng  ONNG-NGT(100, 10, 120, -2, 1.200)
2 vgg-512-euclidean    10 euclidean NGT-onng  ONNG-NGT(100, 10, 120, -2, 0.900)
3 vgg-512-euclidean    10 euclidean NGT-onng  ONNG-NGT(100, 10, 120, -2, 1.050)
4 vgg-512-euclidean    10 euclidean NGT-onng  ONNG-NGT(100, 10, 120, -2, 1.100)
5 vgg-512-euclidean    10 euclidean NGT-onng  ONNG-NGT(100, 10, 120, -2, 0.600)
6 vgg-512-euclidean    10 euclidean NGT-onng  ONNG-NGT(100, 10, 120, -2, 1.070)
  `k-nn` `accuracy-R@1` `accuracy-R@10`     qps queryTime build indexsize
   <dbl>          <dbl>           <dbl>   <dbl>     <dbl> <dbl>     <dbl>
1 1.00           0.973           0.984     39.4 0.0254    8934.  13264308
2 0.0618         0.0989          0.0995 12330.  0.0000811 8934.  13264308
3 0.571          0.560           0.566   1255.  0.000797  8934.  13264308
4 0.998          0.973           0.983    716.  0.00140   8934.  13264308
5 0.0186         0.0938          0.0941 16626.  0.0000601 8934.  13264308
6 0.908          0.890           0.898    944.  0.00106   8934.  13264308
#+end_example


** Query Time vs accuracy-Rank@1

#+begin_src sh :results output none :exports none :session foo
cd ~/Projects/ann-benchmarks
python3 plot.py --dataset vgg-512-euclidean -y queryTime -x accuracy-R@1 -o reports/img/vgg-512-euclidean-query-R1.svg -Y
#+end_src

#+begin_src R :results output graphics :file ./img/vgg-512-euclidean-query-R1.svg :exports results :width 8 :height 5 :session 
library(rPref)

df %>% 
    filter(`accuracy-R@1` > 0.9) %>%
    group_by(algorithm) -> dff

dff %>%
    psel(high(`accuracy-R@1`) * low(queryTime)) -> df_sky

dff %>%  
    ggplot( aes(x=`accuracy-R@1`, y=queryTime*1000, color=algorithm)) +
    geom_point(alpha=0.3) +
    geom_line(data = df_sky) +
    xlim(NA,0.996) +
    labs(y = "Time (ms)") + #x = "Batch number", color="") + 
    scale_y_continuous(trans='log10')
#+end_src

#+RESULTS:
[[file:./img/vgg-512-euclidean-query-R1.svg]]

** Query Time vs accuracy-Rank@10

#+begin_src sh :results output none :exports none :session foo
cd ~/Projects/ann-benchmarks
python3 plot.py --dataset vgg-512-euclidean -y queryTime -x accuracy-R@10 -o reports/img/vgg-512-euclidean-query-R10.svg -Y
#+end_src


#+begin_src R :results output graphics :file ./img/vgg-512-euclidean-query-R10.svg :exports results :width 8 :height 5 :session 
library(rPref)

df %>% 
    filter(`accuracy-R@10` > 0.9) %>%
    group_by(algorithm) -> dff

dff %>%
    psel(high(`accuracy-R@10`) * low(queryTime)) -> df_sky

dff %>%  
    ggplot( aes(x=`accuracy-R@10`, y=queryTime*1000, color=algorithm)) +
    geom_point(alpha=0.3) +
    geom_line(data = df_sky) +
    xlim(NA,0.996) +
    labs(y = "Time (ms)") + #x = "Batch number", color="") + 
    scale_y_continuous(trans='log10')
#+end_src

#+RESULTS:
[[file:./img/vgg-512-euclidean-query-R10.svg]]


** Index Build Time vs accuracy-Rank@1

#+begin_src sh :results output none :exports none :session foo :eval never
cd ~/Projects/ann-benchmarks
python3 plot.py --dataset vgg-512-euclidean -y build -x accuracy-R@1 -o reports/img/vgg-512-euclidean-build-R1.svg -Y
#+end_src

Selection of results minimizing QueryTime, then, build Time 
#+begin_src R :results output graphics :file ./img/vgg-512-euclidean-build-R1.svg :exports results :width 8 :height 5 :session 
library(rPref)

df %>% 
    filter(`accuracy-R@1` > 0.9) %>%
    group_by(algorithm) -> dff

dff %>%
    psel(high(`accuracy-R@1`) * low(queryTime)) %>%
    psel(high(`accuracy-R@1`) * low(build)) -> df_sky

dff %>%  
    ggplot( aes(x=`accuracy-R@1`, y=build/60, color=algorithm)) +
    geom_point(alpha=0.3) +
    geom_line(data = df_sky) +
    xlim(NA,0.996) +
    labs(y = "Build Time (minutes)") + #x = "Batch number", color="") + 
    scale_y_continuous(trans='log10')
#+end_src

#+RESULTS:
[[file:./img/vgg-512-euclidean-build-R1.svg]]

Intersting to note that the exact method (brute-force blass) has less accuracy than other methods
#+begin_src R :results table :colnames yes :exports result :session 
print(df_sky) %>% mutate( query_ms = queryTime*1000, build_min = build/60, index_GB = indexsize/2**20) %>% select(parameters, query_ms, build_min, index_GB,  `accuracy-R@1`, `accuracy-R@10` ) %>% arrange(query_ms) 
#+end_src

#+RESULTS:
| algorithm        | parameters                                                                               |         query_ms |         build_min |         index_GB | accuracy-R@1 | accuracy-R@10 |
|------------------+------------------------------------------------------------------------------------------+------------------+-------------------+------------------+--------------+---------------|
| hnsw(nmslib)     | Nmslib(method_name=hnsw, index_param=['M=12', 'post=0', 'efConstruction=400'])           | 0.57065167427063 |  199.713256665071 | 11.8772773742676 |       0.9601 |        0.9682 |
| hnswlib          | hnswlib ({'efConstruction': 500, 'M': 16})                                               | 1.06465055942535 |  163.933840147654 | 5.69119644165039 |       0.9722 |        0.9818 |
| SW-graph(nmslib) | Nmslib(method_name=sw-graph, index_param=['NN=10'])                                      | 1.12618544101715 |  30.4572507778804 | 6.32625579833984 |       0.9269 |        0.9389 |
| hnswlib          | hnswlib ({'efConstruction': 500, 'M': 24})                                               | 3.50015509128571 |  254.818266665936 | 5.85143280029297 |       0.9731 |        0.9838 |
| BallTree(nmslib) | Nmslib(method_name=vptree, index_param=['tuneK=10', 'desiredRecall=0.1'])                | 3.97013547420502 |   12.812122631073 | 11.0524711608887 |       0.9502 |         0.965 |
| mrpt             | MRPT(target recall=0.970, trees=856, depth=13, vote threshold=3, estimated recall=0.970) | 5.35754635334015 |  72.4786807815234 | 16.2200355529785 |       0.9734 |        0.9827 |
| SW-graph(nmslib) | Nmslib(method_name=sw-graph, index_param=['NN=16'])                                      | 7.59525680541992 |  38.3294889052709 | 6.68539428710938 |       0.9703 |        0.9798 |
| faiss-ivf        | FaissIVF(n_list=4096, n_probe=5)                                                         | 7.81679108142853 |  69.1803858836492 | 7.04918670654297 |       0.9619 |        0.9712 |
| BallTree(nmslib) | Nmslib(method_name=vptree, index_param=['tuneK=10', 'desiredRecall=0.2'])                | 8.75611157417297 |   14.792657037576 | 11.0511779785156 |       0.9594 |        0.9734 |
| SW-graph(nmslib) | Nmslib(method_name=sw-graph, index_param=['NN=24'])                                      | 9.12847907543182 |  49.2221029361089 |  7.1082878112793 |       0.9714 |        0.9818 |
| NGT-panng        | PANNG-NGT(20, 40, 60, 1.200)                                                             | 16.7930703163147 |  92.1775797645251 | 8.05573272705078 |       0.9731 |        0.9838 |
| BallTree(nmslib) | Nmslib(method_name=vptree, index_param=['tuneK=10', 'desiredRecall=0.3'])                | 17.1641060352325 |  17.4534963409106 | 11.0516929626465 |       0.9665 |        0.9796 |
| BallTree(nmslib) | Nmslib(method_name=vptree, index_param=['desiredRecall=0.4', 'tuneK=10'])                | 25.1622835636139 |  19.5538271427155 | 11.0526313781738 |       0.9683 |        0.9812 |
| NGT-onng         | ONNG-NGT(100, 10, 120, -2, 1.200)                                                        | 25.3839553833008 |   148.90233412981 |  12.649829864502 |       0.9731 |        0.9838 |
| BallTree(nmslib) | Nmslib(method_name=vptree, index_param=['tuneK=10', 'desiredRecall=0.5'])                | 40.6399333000183 |  20.6441198706627 | 11.0484504699707 |       0.9689 |        0.9812 |
| annoy            | Annoy(n_trees=100, search_k=100000)                                                      | 41.2896107912064 |  30.5803576032321 | 9.73402404785156 |       0.9725 |        0.9827 |
| faiss-ivf        | FaissIVF(n_list=8192, n_probe=100)                                                       | 55.3959785223007 |  245.053373984496 | 6.95387268066406 |       0.9731 |        0.9818 |
| BallTree(nmslib) | Nmslib(method_name=vptree, index_param=['desiredRecall=0.6', 'tuneK=10'])                | 56.0337100028992 |  22.2244418780009 | 11.0520935058594 |       0.9701 |        0.9821 |
| BallTree(nmslib) | Nmslib(method_name=vptree, index_param=['desiredRecall=0.7', 'tuneK=10'])                | 75.2319760799408 |  33.6263937393824 | 11.0540771484375 |       0.9719 |        0.9835 |
| annoy            | Annoy(n_trees=200, search_k=200000)                                                      | 75.5549807548523 |  58.7620766202609 | 12.6541976928711 |       0.9731 |        0.9838 |
| BallTree(nmslib) | Nmslib(method_name=vptree, index_param=['tuneK=10', 'desiredRecall=0.8'])                | 118.189064955711 |  34.1173119942347 | 11.0523338317871 |       0.9723 |        0.9835 |
| BallTree(nmslib) | Nmslib(method_name=vptree, index_param=['desiredRecall=0.85', 'tuneK=10'])               | 137.541626477242 |  34.2718070705732 | 11.1734619140625 |       0.9726 |        0.9837 |
| BallTree(nmslib) | Nmslib(method_name=vptree, index_param=['desiredRecall=0.9', 'tuneK=10'])                | 170.382858538628 |  37.1342719872793 | 11.0531311035156 |       0.9729 |         0.984 |
| BallTree(nmslib) | Nmslib(method_name=vptree, index_param=['tuneK=10', 'desiredRecall=0.95'])               | 227.916754460335 |  37.9180619637171 | 11.0534553527832 |        0.973 |        0.9841 |
| BallTree(nmslib) | Nmslib(method_name=vptree, index_param=['desiredRecall=0.97', 'tuneK=10'])               | 267.756254792213 |  39.5940539797147 | 11.0581321716309 |       0.9732 |         0.984 |
| bruteforce-blas  | BruteForceBLAS()                                                                         | 672.702276968956 | 0.126939809322357 | 5.16335296630859 |        0.962 |        0.9838 |


** Index Size vs accuracy-Rank@1


#+begin_src sh :results output none :exports none :session foo
cd ~/Projects/ann-benchmarks
python3 plot.py --dataset vgg-512-euclidean -y indexsize -x accuracy-R@1 -o reports/img/vgg-512-euclidean-IndexSize-R1.svg -Y
#+end_src

Selection of results optimizing QueryTime then IndexSize

#+begin_src R :results output graphics :file ./img/vgg-512-euclidean-IndexSize-R1.svg :exports results :width 8 :height 5 :session 
library(rPref)

df %>% 
    filter(`accuracy-R@1` > 0.9) %>%
    group_by(algorithm) -> dff

# maximize result with according to QueryTime
dff %>%
    psel(high(`accuracy-R@1`) * low(queryTime) ) %>%
    psel(high(`accuracy-R@1`) * low(indexsize) ) -> df_sky

df_sky %>%  
    ggplot( aes(x=`accuracy-R@1`, y=indexsize/2**20, color=algorithm)) +
    geom_point(alpha=1) +
    #geom_point(data = dff, alpha=0.1) +
    xlim(NA,0.996) +
    labs(y = "IndexSize (GBytes)") + #x = "Batch number", color="") + 
    scale_y_continuous(trans='log10')
#+end_src

#+RESULTS:
[[file:./img/vgg-512-euclidean-IndexSize-R1.svg]]


#+begin_src R :results table :colnames yes :exports both :session 
print(df_sky) %>% mutate( query_ms = queryTime*1000, index_GB = indexsize/2**20) %>% select(parameters, query_ms, index_GB,  `accuracy-R@1`, `accuracy-R@10` ) %>% arrange(query_ms) 
#+end_src

#+RESULTS:
| algorithm        | parameters                                                                               |         query_ms |         index_GB | accuracy-R@1 | accuracy-R@10 |
|------------------+------------------------------------------------------------------------------------------+------------------+------------------+--------------+---------------|
| hnsw(nmslib)     | Nmslib(method_name=hnsw, index_param=['M=12', 'post=0', 'efConstruction=400'])           | 0.57065167427063 | 11.8772773742676 |       0.9601 |        0.9682 |
| hnswlib          | hnswlib ({'efConstruction': 500, 'M': 16})                                               | 1.06465055942535 | 5.69119644165039 |       0.9722 |        0.9818 |
| SW-graph(nmslib) | Nmslib(method_name=sw-graph, index_param=['NN=10'])                                      | 1.12618544101715 | 6.32625579833984 |       0.9269 |        0.9389 |
| hnswlib          | hnswlib ({'efConstruction': 500, 'M': 24})                                               | 3.50015509128571 | 5.85143280029297 |       0.9731 |        0.9838 |
| mrpt             | MRPT(target recall=0.970, trees=856, depth=13, vote threshold=3, estimated recall=0.970) | 5.35754635334015 | 16.2200355529785 |       0.9734 |        0.9827 |
| SW-graph(nmslib) | Nmslib(method_name=sw-graph, index_param=['NN=16'])                                      | 7.59525680541992 | 6.68539428710938 |       0.9703 |        0.9798 |
| SW-graph(nmslib) | Nmslib(method_name=sw-graph, index_param=['NN=24'])                                      | 9.12847907543182 |  7.1082878112793 |       0.9714 |        0.9818 |
| NGT-panng        | PANNG-NGT(20, 40, 60, 1.200)                                                             | 16.7930703163147 | 8.05573272705078 |       0.9731 |        0.9838 |
| NGT-onng         | ONNG-NGT(100, 10, 120, -2, 1.200)                                                        | 25.3839553833008 |  12.649829864502 |       0.9731 |        0.9838 |
| BallTree(nmslib) | Nmslib(method_name=vptree, index_param=['tuneK=10', 'desiredRecall=0.5'])                | 40.6399333000183 | 11.0484504699707 |       0.9689 |        0.9812 |
| annoy            | Annoy(n_trees=100, search_k=100000)                                                      | 41.2896107912064 | 9.73402404785156 |       0.9725 |        0.9827 |
| faiss-ivf        | FaissIVF(n_list=8192, n_probe=100)                                                       | 55.3959785223007 | 6.95387268066406 |       0.9731 |        0.9818 |
| BallTree(nmslib) | Nmslib(method_name=vptree, index_param=['desiredRecall=0.6', 'tuneK=10'])                | 56.0337100028992 | 11.0520935058594 |       0.9701 |        0.9821 |
| annoy            | Annoy(n_trees=200, search_k=200000)                                                      | 75.5549807548523 | 12.6541976928711 |       0.9731 |        0.9838 |
| BallTree(nmslib) | Nmslib(method_name=vptree, index_param=['tuneK=10', 'desiredRecall=0.8'])                | 118.189064955711 | 11.0523338317871 |       0.9723 |        0.9835 |
| BallTree(nmslib) | Nmslib(method_name=vptree, index_param=['desiredRecall=0.9', 'tuneK=10'])                | 170.382858538628 | 11.0531311035156 |       0.9729 |         0.984 |
| BallTree(nmslib) | Nmslib(method_name=vptree, index_param=['tuneK=10', 'desiredRecall=0.95'])               | 227.916754460335 | 11.0534553527832 |        0.973 |        0.9841 |
| BallTree(nmslib) | Nmslib(method_name=vptree, index_param=['desiredRecall=0.97', 'tuneK=10'])               | 267.756254792213 | 11.0581321716309 |       0.9732 |         0.984 |
| bruteforce-blas  | BruteForceBLAS()                                                                         | 672.702276968956 | 5.16335296630859 |        0.962 |        0.9838 |









